package bsh;

import bsh.org.objectweb.asm.Constants;

public interface ParserConstants {
    public static final int ABSTRACT = 10;
    public static final int ANDASSIGN = 122;
    public static final int ANDASSIGNX = 123;
    public static final int ASSIGN = 81;
    public static final int BANG = 86;
    public static final int BIT_AND = 106;
    public static final int BIT_ANDX = 107;
    public static final int BIT_OR = 108;
    public static final int BIT_ORX = 109;
    public static final int BOOLEAN = 11;
    public static final int BOOL_AND = 98;
    public static final int BOOL_ANDX = 99;
    public static final int BOOL_OR = 96;
    public static final int BOOL_ORX = 97;
    public static final int BREAK = 12;
    public static final int BYTE = 14;
    public static final int CASE = 15;
    public static final int CATCH = 16;
    public static final int CHAR = 17;
    public static final int CHARACTER_LITERAL = 66;
    public static final int CLASS = 13;
    public static final int COLON = 89;
    public static final int COMMA = 79;
    public static final int CONST = 18;
    public static final int CONTINUE = 19;
    public static final int DECIMAL_LITERAL = 61;
    public static final int DECR = 101;
    public static final int DEFAULT = 0;
    public static final int DIGIT = 71;

    /* renamed from: DO */
    public static final int f651DO = 21;
    public static final int DOT = 80;
    public static final int DOUBLE = 22;
    public static final int ELSE = 23;
    public static final int ENUM = 24;
    public static final int EOF = 0;

    /* renamed from: EQ */
    public static final int f652EQ = 90;
    public static final int EXPONENT = 65;
    public static final int EXTENDS = 25;
    public static final int FALSE = 26;
    public static final int FINAL = 27;
    public static final int FINALLY = 28;
    public static final int FLOAT = 29;
    public static final int FLOATING_POINT_LITERAL = 64;
    public static final int FOR = 30;
    public static final int FORMAL_COMMENT = 68;

    /* renamed from: GE */
    public static final int f653GE = 93;
    public static final int GEX = 94;
    public static final int GOTO = 31;

    /* renamed from: GT */
    public static final int f654GT = 82;
    public static final int GTX = 83;
    public static final int HASH_BANG_COMMENT = 8;
    public static final int HEX_LITERAL = 62;
    public static final int HOOK = 88;
    public static final int IDENTIFIER = 69;

    /* renamed from: IF */
    public static final int f655IF = 32;
    public static final int IMPLEMENTS = 33;
    public static final int IMPORT = 34;
    public static final int INCR = 100;
    public static final int INSTANCEOF = 35;
    public static final int INT = 36;
    public static final int INTEGER_LITERAL = 60;
    public static final int INTERFACE = 37;
    public static final int LBRACE = 74;
    public static final int LBRACKET = 76;

    /* renamed from: LE */
    public static final int f656LE = 91;
    public static final int LETTER = 70;
    public static final int LEX = 92;
    public static final int LONG = 38;
    public static final int LPAREN = 72;
    public static final int LSHIFT = 112;
    public static final int LSHIFTASSIGN = 128;
    public static final int LSHIFTASSIGNX = 129;
    public static final int LSHIFTX = 113;

    /* renamed from: LT */
    public static final int f657LT = 84;
    public static final int LTX = 85;
    public static final int MINUS = 103;
    public static final int MINUSASSIGN = 119;
    public static final int MOD = 111;
    public static final int MODASSIGN = 127;
    public static final int MULTI_LINE_COMMENT = 9;
    public static final int NATIVE = 39;

    /* renamed from: NE */
    public static final int f658NE = 95;
    public static final int NEW = 40;
    public static final int NONPRINTABLE = 6;
    public static final int NULL = 41;
    public static final int OCTAL_LITERAL = 63;
    public static final int ORASSIGN = 124;
    public static final int ORASSIGNX = 125;
    public static final int PACKAGE = 42;
    public static final int PLUS = 102;
    public static final int PLUSASSIGN = 118;
    public static final int PRIVATE = 43;
    public static final int PROTECTED = 44;
    public static final int PUBLIC = 45;
    public static final int RBRACE = 75;
    public static final int RBRACKET = 77;
    public static final int RETURN = 46;
    public static final int RPAREN = 73;
    public static final int RSIGNEDSHIFT = 114;
    public static final int RSIGNEDSHIFTASSIGN = 130;
    public static final int RSIGNEDSHIFTASSIGNX = 131;
    public static final int RSIGNEDSHIFTX = 115;
    public static final int RUNSIGNEDSHIFT = 116;
    public static final int RUNSIGNEDSHIFTASSIGN = 132;
    public static final int RUNSIGNEDSHIFTASSIGNX = 133;
    public static final int RUNSIGNEDSHIFTX = 117;
    public static final int SEMICOLON = 78;
    public static final int SHORT = 47;
    public static final int SINGLE_LINE_COMMENT = 7;
    public static final int SLASH = 105;
    public static final int SLASHASSIGN = 121;
    public static final int STAR = 104;
    public static final int STARASSIGN = 120;
    public static final int STATIC = 48;
    public static final int STRICTFP = 49;
    public static final int STRING_LITERAL = 67;
    public static final int SWITCH = 50;
    public static final int SYNCHRONIZED = 51;
    public static final int THROW = 53;
    public static final int THROWS = 54;
    public static final int TILDE = 87;
    public static final int TRANSIENT = 52;
    public static final int TRUE = 55;
    public static final int TRY = 56;
    public static final int VOID = 57;
    public static final int VOLATILE = 58;
    public static final int WHILE = 59;
    public static final int XOR = 110;
    public static final int XORASSIGN = 126;
    public static final int _DEFAULT = 20;
    public static final String[] tokenImage;

    static {
        String[] strArr = new String[Constants.I2F];
        strArr[0] = "<EOF>";
        strArr[1] = "\" \"";
        strArr[2] = "\"\\t\"";
        strArr[3] = "\"\\r\"";
        strArr[4] = "\"\\f\"";
        strArr[5] = "\"\\n\"";
        strArr[6] = "<NONPRINTABLE>";
        strArr[7] = "<SINGLE_LINE_COMMENT>";
        strArr[8] = "<HASH_BANG_COMMENT>";
        strArr[9] = "<MULTI_LINE_COMMENT>";
        strArr[10] = "\"abstract\"";
        strArr[11] = "\"boolean\"";
        strArr[12] = "\"break\"";
        strArr[13] = "\"class\"";
        strArr[14] = "\"byte\"";
        strArr[15] = "\"case\"";
        strArr[16] = "\"catch\"";
        strArr[17] = "\"char\"";
        strArr[18] = "\"const\"";
        strArr[19] = "\"continue\"";
        strArr[20] = "\"default\"";
        strArr[21] = "\"do\"";
        strArr[22] = "\"double\"";
        strArr[23] = "\"else\"";
        strArr[24] = "\"enum\"";
        strArr[25] = "\"extends\"";
        strArr[26] = "\"false\"";
        strArr[27] = "\"final\"";
        strArr[28] = "\"finally\"";
        strArr[29] = "\"float\"";
        strArr[30] = "\"for\"";
        strArr[31] = "\"goto\"";
        strArr[32] = "\"if\"";
        strArr[33] = "\"implements\"";
        strArr[34] = "\"import\"";
        strArr[35] = "\"instanceof\"";
        strArr[36] = "\"int\"";
        strArr[37] = "\"interface\"";
        strArr[38] = "\"long\"";
        strArr[39] = "\"native\"";
        strArr[40] = "\"new\"";
        strArr[41] = "\"null\"";
        strArr[42] = "\"package\"";
        strArr[43] = "\"private\"";
        strArr[44] = "\"protected\"";
        strArr[45] = "\"public\"";
        strArr[46] = "\"return\"";
        strArr[47] = "\"short\"";
        strArr[48] = "\"static\"";
        strArr[49] = "\"strictfp\"";
        strArr[50] = "\"switch\"";
        strArr[51] = "\"synchronized\"";
        strArr[52] = "\"transient\"";
        strArr[53] = "\"throw\"";
        strArr[54] = "\"throws\"";
        strArr[55] = "\"true\"";
        strArr[56] = "\"try\"";
        strArr[57] = "\"void\"";
        strArr[58] = "\"volatile\"";
        strArr[59] = "\"while\"";
        strArr[60] = "<INTEGER_LITERAL>";
        strArr[61] = "<DECIMAL_LITERAL>";
        strArr[62] = "<HEX_LITERAL>";
        strArr[63] = "<OCTAL_LITERAL>";
        strArr[64] = "<FLOATING_POINT_LITERAL>";
        strArr[65] = "<EXPONENT>";
        strArr[66] = "<CHARACTER_LITERAL>";
        strArr[67] = "<STRING_LITERAL>";
        strArr[68] = "<FORMAL_COMMENT>";
        strArr[69] = "<IDENTIFIER>";
        strArr[70] = "<LETTER>";
        strArr[71] = "<DIGIT>";
        strArr[72] = "\"(\"";
        strArr[73] = "\")\"";
        strArr[74] = "\"{\"";
        strArr[75] = "\"}\"";
        strArr[76] = "\"[\"";
        strArr[77] = "\"]\"";
        strArr[78] = "\";\"";
        strArr[79] = "\",\"";
        strArr[80] = "\".\"";
        strArr[81] = "\"=\"";
        strArr[82] = "\">\"";
        strArr[83] = "\"@gt\"";
        strArr[84] = "\"<\"";
        strArr[85] = "\"@lt\"";
        strArr[86] = "\"!\"";
        strArr[87] = "\"~\"";
        strArr[88] = "\"?\"";
        strArr[89] = "\":\"";
        strArr[90] = "\"==\"";
        strArr[91] = "\"<=\"";
        strArr[92] = "\"@lteq\"";
        strArr[93] = "\">=\"";
        strArr[94] = "\"@gteq\"";
        strArr[95] = "\"!=\"";
        strArr[96] = "\"||\"";
        strArr[97] = "\"@or\"";
        strArr[98] = "\"&&\"";
        strArr[99] = "\"@and\"";
        strArr[100] = "\"++\"";
        strArr[101] = "\"--\"";
        strArr[102] = "\"+\"";
        strArr[103] = "\"-\"";
        strArr[104] = "\"*\"";
        strArr[105] = "\"/\"";
        strArr[106] = "\"&\"";
        strArr[107] = "\"@bitwise_and\"";
        strArr[108] = "\"|\"";
        strArr[109] = "\"@bitwise_or\"";
        strArr[110] = "\"^\"";
        strArr[111] = "\"%\"";
        strArr[112] = "\"<<\"";
        strArr[113] = "\"@left_shift\"";
        strArr[114] = "\">>\"";
        strArr[115] = "\"@right_shift\"";
        strArr[116] = "\">>>\"";
        strArr[117] = "\"@right_unsigned_shift\"";
        strArr[118] = "\"+=\"";
        strArr[119] = "\"-=\"";
        strArr[120] = "\"*=\"";
        strArr[121] = "\"/=\"";
        strArr[122] = "\"&=\"";
        strArr[123] = "\"@and_assign\"";
        strArr[124] = "\"|=\"";
        strArr[125] = "\"@or_assign\"";
        strArr[126] = "\"^=\"";
        strArr[127] = "\"%=\"";
        strArr[128] = "\"<<=\"";
        strArr[129] = "\"@left_shift_assign\"";
        strArr[130] = "\">>=\"";
        strArr[131] = "\"@right_shift_assign\"";
        strArr[132] = "\">>>=\"";
        strArr[133] = "\"@right_unsigned_shift_assign\"";
        tokenImage = strArr;
    }
}
